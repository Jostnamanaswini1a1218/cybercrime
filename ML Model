{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOnxVWDOZQwLGGrm+YK4IFs",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Jostnamanaswini1a1218/cybercrime/blob/main/ML%20Model\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K9GrE8-KySh3",
        "outputId": "8df95512-8c14-4e2e-9ae3-e508e1e5c0e9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.8564544184322336\n",
            "\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.25      0.23      0.24       393\n",
            "           1       0.19      0.19      0.19       360\n",
            "           2       0.38      0.39      0.39      2370\n",
            "           3       0.76      0.78      0.77      6772\n",
            "           4       0.82      0.88      0.85      3570\n",
            "           5       1.00      0.98      0.99      8079\n",
            "           6       0.99      0.97      0.98     11169\n",
            "           7       0.79      0.77      0.78      2098\n",
            "           8       0.71      0.67      0.69       233\n",
            "           9       1.00      0.28      0.44        25\n",
            "\n",
            "    accuracy                           0.86     35069\n",
            "   macro avg       0.69      0.61      0.63     35069\n",
            "weighted avg       0.86      0.86      0.86     35069\n",
            "\n",
            "\n",
            "Confusion Matrix:\n",
            " [[   90    24   129   107    27     2     7     7     0     0]\n",
            " [   26    68    88    98    17     7     0    53     3     0]\n",
            " [  111    94   924   984   112     8     0   122    15     0]\n",
            " [   82    70   955  5273   161    18     3   184    26     0]\n",
            " [   48    22   118   118  3144     3    49    52    16     0]\n",
            " [    1     4    34    98    13  7926     0     3     0     0]\n",
            " [    1     0     1    33   283     0 10842     6     3     0]\n",
            " [    6    82   163   193    47     0     0  1605     2     0]\n",
            " [    0     0     8    25    41     1     1     1   156     0]\n",
            " [    0     0     0    18     0     0     0     0     0     7]]\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n",
        "\n",
        "# Step 1: Load Dataset\n",
        "df = pd.read_csv(\"/content/UNSW_NB15_training-set(in).csv\")\n",
        "\n",
        "# Step 2: Handle Missing Values (if any)\n",
        "df = df.dropna()\n",
        "\n",
        "# Step 3: Encode Categorical Columns\n",
        "le = LabelEncoder()\n",
        "for col in df.select_dtypes(include='object').columns:\n",
        "    df[col] = le.fit_transform(df[col])\n",
        "\n",
        "# Step 4: Feature Selection\n",
        "X = df.drop(['attack_cat', 'label'], axis=1)  # drop target and label column\n",
        "y = df['attack_cat']  # Target\n",
        "\n",
        "# Step 5: Split the Data\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Step 6: Train Random Forest\n",
        "rf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "rf.fit(X_train, y_train)\n",
        "\n",
        "# Step 7: Evaluate the Model\n",
        "y_pred = rf.predict(X_test)\n",
        "\n",
        "print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
        "print(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred))\n",
        "print(\"\\nConfusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "\n",
        "# Step 1: Load Dataset\n",
        "df = pd.read_csv(\"/content/UNSW_NB15_training-set(in).csv\")\n",
        "\n",
        "# Step 2: Drop missing values (if any)\n",
        "df = df.dropna()\n",
        "\n",
        "# Step 3: Encode categorical features\n",
        "le = LabelEncoder()\n",
        "for col in df.select_dtypes(include='object').columns:\n",
        "    df[col] = le.fit_transform(df[col])\n",
        "\n",
        "# Step 4: Define features (X) and target (y)\n",
        "X = df.drop(['label', 'attack_cat'], axis=1)  # Drop target columns\n",
        "y = df['label']  # Binary classification: 0 (benign), 1 (attack)\n",
        "\n",
        "# Step 5: Split data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Step 6: Train the Random Forest model\n",
        "rf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "rf.fit(X_train, y_train)\n",
        "\n",
        "# Step 7: Make predictions\n",
        "y_pred = rf.predict(X_test)\n",
        "\n",
        "# Step 8: Evaluate the model\n",
        "print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
        "print(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred))\n",
        "print(\"\\nConfusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SWvhuXsZzkgG",
        "outputId": "3329362a-b72b-4143-a5c7-27656ad389d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.9890501582594314\n",
            "\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      0.97      0.98     11169\n",
            "           1       0.99      1.00      0.99     23900\n",
            "\n",
            "    accuracy                           0.99     35069\n",
            "   macro avg       0.99      0.98      0.99     35069\n",
            "weighted avg       0.99      0.99      0.99     35069\n",
            "\n",
            "\n",
            "Confusion Matrix:\n",
            " [[10836   333]\n",
            " [   51 23849]]\n"
          ]
        }
      ]
    }
  ]
}